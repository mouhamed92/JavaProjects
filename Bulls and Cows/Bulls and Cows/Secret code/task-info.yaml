type: edu
files:
- name: src/bullscows/Main.java
  visible: true
  text: |
    package bullscows;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/BullsCowsTest.java
  visible: false
  text: |-
    import bullscows.Main;
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.LinkedHashSet;
    import java.util.List;
    import java.util.stream.Collectors;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;

    public class BullsCowsTest extends StageTest<String> {

        // basic test case
        @DynamicTestingMethod
        CheckResult test1() {
            TestedProgram main = new TestedProgram();
            main.start();
            String output = main.execute("4").toLowerCase().trim();

            return outputCheck(output, 4);
        }

        @DynamicTestingMethod
        CheckResult test2() {
            TestedProgram main = new TestedProgram();
            main.start();
            String output = main.execute("1").toLowerCase().trim();

            return outputCheck(output, 1);
        }

        // test of incorrect input
        @DynamicTestingMethod
        CheckResult test4() {
            TestedProgram main = new TestedProgram();
            main.start();
            String output = main.execute("11").toLowerCase().trim();

            return outputCheck(output, 11);
        }

        @DynamicTestingMethod
        CheckResult test5() {
            TestedProgram main = new TestedProgram();
            main.start();
            String output = main.execute("6").toLowerCase().trim();

            return outputCheck(output, 6);
        }

        @DynamicTestingMethod
        CheckResult test6() {
            TestedProgram main = new TestedProgram();
            main.start();
            String output = main.execute("3").toLowerCase().trim();

            return outputCheck(output, 3);
        }


        CheckResult outputCheck(String source, int length) {

            if (length > 10) {
                if (source.toLowerCase().contains("error")) {
                    return CheckResult.correct();
                } else {
                    return CheckResult.wrong("An error message expected with input " +
                            "\"" + length + "\"");
                }
            }

            List<Integer> integers = expect(source).toContain(1).integers();
            source = "" + integers.get(0);

            if (source.length() != length) {
                return CheckResult.wrong("The output number of your program has " +
                        "an incorrect length (found " + source.length() + ")");
            }

            List<Integer> temp = stringToArrayOfNumbers(source);
            temp = new ArrayList<>(new LinkedHashSet<>(temp));

            if (temp.toArray().length != source.length()) {
                return CheckResult.wrong("Digits in the generated number are not unique.");
            }

            return CheckResult.correct();
        }

        private static List<Integer> stringToArrayOfNumbers(String array) {
            return Arrays.stream(array.split(""))
                    .map(Integer::parseInt)
                    .collect(Collectors.toList());
        }
    }
  learner_created: false
- name: src/bullscows/Inputs.java
  visible: true
  text: |
    package bullscows;

    import java.util.Scanner;

    public class Inputs {

         Scanner sc = new Scanner(System.in);
        public  int inputNumber(){
            return sc.nextInt() ;
        }
    }
  learner_created: true
- name: src/bullscows/Game.java
  visible: true
  text: |
    package bullscows;

    import java.util.Random;

    public class Game {

        int secretN = 0 ;
        int n = 0 ;
        String str1 ;
        String str2 ;
        Inputs inputs = new Inputs();


        public Game(int secretN) {
            this.secretN = secretN ;
        }


        void guessNumber(){
            int cows = 0 ;
            int bulls = 0 ;
            n = inputs.inputNumber();
            str1 = Integer.toString(n);
            str2 = Integer.toString(secretN);

            for (int i = 0 ; i < str1.length() ; i++){
                for (int j = 0 ; j < str2.length() ; j++){
                    if(str1.charAt(i) == str2.charAt(j)){
                       cows++ ;
                       if(i==j){
                           cows-- ;
                           bulls++;
                       }
                    }
                }
            }

             display(cows , bulls);
        }

        void display(int cows , int bulls){

            if (cows == 0 && bulls == 0){
                System.out.println("Grade: None. The secret code is "+secretN+ "." );
            }else if (cows > 0 && bulls == 0){
                System.out.println("Grade: "+ cows +" cow(s). The secret code is "+ secretN+".");
            } else if (cows == 0 && bulls > 0) {
                System.out.println("Grade :"+ bulls +" bull(s). The secret code is "+ secretN+".");
            }else {
                System.out.println("Grade: "+ cows +" bull(s) and "+ bulls +" cow(s). The secret code is "+ secretN+".");
            }

        }


    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5431#comment
status: Failed
feedback:
  message: |-
    Presentation error in test #1

    The following output contains wrong number of integers (expected to be equal to 1, found 2):
    4951
    okay, let&#39;s start a game!
    turn 1:

    Please find below the output of your program during this failed test.
    Note that the &#39;&gt;&#39; character indicates the beginning of the input line.

    ---

    Please, enter the secret code&#39;s length:
    &gt; 4
    4951
    Okay, let&#39;s start a game!
    Turn 1:
  time: "Thu, 15 Jun 2023 11:52:56 UTC"
record: 3
